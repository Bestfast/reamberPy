############
Map Analysis
############

The purpose of Map Analysis to cover all analytics functions instead of separating them.

This also aims to override most current classes functions. So this is like an overarching analytics API for the current
API.

The golden rule of this class is that it does not affect the map, so, it's **read-only**.

***************************************
Reason for Separation from Base Classes
***************************************

I could implement all of these functions in the base module, allowing all that inherits it to access the functions.

However, I feel that it'll clutter it too much, where there's too many functions that the user may not require.

As per the golden rule, this class will facilitate all **read-only** functions, hence the user can guarantee no
mutations when handling functions here unless it's explicitly set.

******
Syntax
******

The trick is that MapAnalysis masks all the properties of maps, so instead of expecting the actual property, it'll be
a directory for more functions.

Here's an example

.. code-block:: python

    m = OsuMapObj.readfile("path/to/file.osu")
    m.bpms  # Accesses the bpms property
    ma = MapAnalysis(m)
    ma.bpms.aveBpm()  # Accesses the class that deals with bpms
    ma.notes.npsPlot()  # Accesses the class that deals with notes

If we have something that's specific to a map type, e.g. Svs

.. code-block:: python

    m = OsuMapObj.readfile("path/to/file.osu")
    ma = MapAnalysis(m)
    ma.osu.sv.plot()  # Accesses the class that deals with osu files only, then we can enter more specific functions.

To remove the need to deal with map vs. mapsets, we'll only accept maps.

.. code-block:: python

    s = SMMapSetObj.readfile("path/to/file.sm")
    ma = MapAnalysis(m=s.maps[0], s)
    ma.sm.mines.offsets()  # Accesses the class that deals with osu files only, then we can enter more specific functions.

