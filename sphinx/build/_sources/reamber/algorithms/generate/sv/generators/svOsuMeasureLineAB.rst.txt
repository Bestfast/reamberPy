##############
Algorithm Info
##############

*******
History
*******

Algorithm B has been used widely in the early years of Measure Line Manipulation in osu!.
e.g. Backbeat Maniac, Singularity

The trick of Algorithm B is simpler in execution, hence it's more popular to be used.

Algorithm A is discovered because of the need to stack multiple functions together, creating a more visually engaging
chart.

Algorithm C is a proposed algorithm by `datoujia`, suggested to me by `Sillyp`. This algorithm proves to be the most
consistent zeroing out flickering. We'll discuss C much later.

Stacking
========

Stacking is a problem encountered when handling multiple functions.

When you input multiple functions directly, you are essentially displaying

.. math::

    [A(x), A(x) + B(x), A(x) + B(x) + C(x) + ...]

this is because the algorithm places each function on top of each other.

To counter this, we need to subtract :math:`A(x)` from the next input, then :math:`B(x)` and so on.

However, you'd notice that if :math:`A(x) > B(x)` you'd end up with a negative result. Hence you'd need to consider the
order of the magnitudes.

Since the order of the input functions don't matter, we can order them at every :math:`x`.

For example

.. math::

    \begin{align*}
        A(x) &= sin(x) + 1 \\
        B(x) &= sin(x + \pi) + 1 \\
        C(x) &= 1 \\
    \end{align*}

With :math:`x=\pi/2` and :math:`x=3\pi/2`, you get the following orders.

.. math::

    \begin{align*}
        B(\pi/2) &< C(\pi/2) < A(\pi/2) \\
        A(3\pi/2) &< C(3\pi/2) < B(3\pi/2) \\
    \end{align*}

By ordering them from smallest to largest, you'd guarantee a non-negative result if you take the differences.

Negative Function
=================

If the user decides to input a negative value

.. math::

    \begin{align*}
        A(x) &= sin(x) \\
        B(x) &= 1 \\
    \end{align*}

You'd run into a problem where the the algorithm may break.

The simplest solution would be to just add a ``max(f(x), 0)``. This is just a short form for ``if x < 0 then x = 0``.

