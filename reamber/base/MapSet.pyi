from __future__ import annotations

from copy import deepcopy
from dataclasses import dataclass
from typing import List, Iterator, TypeVar, Union, Any, Generator, Tuple, overload, Generic

import numpy as np
import pandas as pd

from reamber.base.Map import Map
from reamber.base.Property import stack_props
from reamber.base.lists import TimedList
from reamber.base.lists.BpmList import BpmList
from reamber.base.lists.notes.HitList import HitList
from reamber.base.lists.notes.HoldList import HoldList
from reamber.base.lists.notes.NoteList import NoteList

NoteListT = TypeVar('NoteListT', bound=NoteList)
HitListT = TypeVar('HitListT', bound=HitList)
HoldListT = TypeVar('HoldListT', bound=HoldList)
BpmListT = TypeVar('BpmListT', bound=BpmList)
MapT = TypeVar('MapT', bound=Map)


@dataclass
class MapSet(Generic[NoteListT, HitListT, HoldListT, BpmListT, MapT]):

    maps: List[MapT[NoteListT, HitListT, HoldListT, BpmListT]]

    def __init__(self, maps: List[Map[NoteListT, HitListT, HoldListT, BpmListT]]): ...
    def __iter__(self) -> Iterator[Map]: ...
    def items(self) -> Generator[Tuple[type, Map]]: ...
    @overload
    def __getitem__(self, item: int) -> MapT: ...
    @overload
    def __getitem__(self, item: type = NoteListT) -> List[List[NoteListT]]: ...
    @overload
    def __getitem__(self, item: type = BpmListT) -> List[List[BpmListT]]: ...
    @overload
    def __getitem__(self, item: type = HitListT) -> List[List[HitListT]]: ...
    @overload
    def __getitem__(self, item: type = HoldListT) -> List[List[HoldListT]]: ...
    @overload
    def __getitem__(self, item: int) -> Map: ...
    @overload
    def __getitem__(self, item: slice) -> List[Map]: ...
    def __setitem__(self, key: Union[Any, type], value): ...
    def deepcopy(self): ...
    def describe(self, rounding: int = 2, unicode: bool = False) -> List[str]: ...
    def rate(self, by: float) -> MapSet: ...
    @stack_props()
    class Stacker:
        _ixs: np.ndarray
        _unstacked: List[List[TimedList]]
        _stacked: pd.DataFrame
        _stacks: List
        def __init__(self, maps: List[Map]): ...
        def _update(self): ...
        def __getitem__(self, item): ...
        def __setitem__(self, key, value): ...
    @property
    def stack(self) -> Stacker: ...
