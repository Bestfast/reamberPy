from __future__ import annotations

from copy import deepcopy
from dataclasses import asdict
from typing import Tuple, List, Dict, Any, Iterator, Union, overload, Generic, TypeVar

import pandas as pd

from reamber.base.lists.notes import HitList
from reamber.base.lists.notes.HoldList import HoldList
from reamber.base.lists.notes.NoteList import NoteList


NoteListT = TypeVar('NoteListT')
HitListT = TypeVar('HitListT')
HoldListT = TypeVar('HoldListT')

class NotePkg(Generic[NoteListT, HitListT, HoldListT]):
    _lists = Dict[str, NoteList]

    @overload
    def __init__(self, hits: HitListT, holds: HoldListT, **kwargs): ...
    def __init__(self, **kwargs: NoteListT): ...
    def __len__(self): ...
    def __iter__(self) -> Iterator[NoteListT]: ...
    @overload
    def __getitem__(self, item='hits') -> HitListT: ...
    @overload
    def __getitem__(self, item='holds') -> HoldListT: ...
    def __getitem__(self, item) -> NoteListT: ...

    @property
    def lists(self) -> Dict[str, NoteListT]: ...
    @lists.setter
    def lists(self, val): ...
    @property
    def hits(self) -> HitListT: ...
    @property
    def holds(self) -> HoldListT: ...
    @property
    def offset(self) -> Dict[str, pd.Series]: ...
    @offset.setter
    def offset(self, vals: Dict): ...
    @property
    def column(self) -> Dict[str, pd.Series]: ...
    @column.setter
    def column(self, vals: Dict): ...
    def deepcopy(self) -> NotePkg: ...
    def df(self) -> Dict[str, pd.DataFrame]: ...
    def obj_count(self) -> int: ...
    def method(self, method: str, **kwargs) -> Dict[str, Any]: ...
    def in_columns(self, columns: List[int]) -> NotePkg: ...
    def max_column(self) -> int: ...
    def first_offset(self) -> float: ...
    def last_offset(self) -> float: ...
    def first_last_offset(self) -> Tuple[float, float]: ...
    def describe_notes(self) -> Dict[str, pd.DataFrame]: ...
    def rolling_density(self, window: int = 1000, stride: int = None,
                        first_offset: float = None, last_offset: float = None) -> Dict[str, Dict[int, int]]: ...
    def duration(self) -> float: ...
