from __future__ import annotations

from copy import deepcopy
from dataclasses import asdict
from typing import Tuple, List, Dict, Any, Iterator, Union

import pandas as pd

from reamber.base.lists.notes import HitList
from reamber.base.lists.notes.HoldList import HoldList
from reamber.base.lists.notes.NoteList import NoteList


class NotePkg:
    _lists = Dict[str, NoteList]

    def __init__(self, **kwargs: NoteList): ...
    @property
    def lists(self) -> Dict[str, NoteList]: ...
    @lists.setter
    def lists(self, val): ...
    @property
    def hits(self) -> HitList: ...
    @property
    def holds(self) -> HoldList: ...
    def __len__(self): ...
    def __iter__(self) -> Iterator[NoteList]: ...
    @property
    def offset(self): ...
    @offset.setter
    def offset(self, vals: Dict): ...
    @property
    def column(self): ...
    @column.setter
    def column(self, vals: Dict): ...
    def deepcopy(self) -> NotePkg: ...
    def df(self) -> Dict[str, pd.DataFrame]: ...
    def obj_count(self) -> int: ...
    def method(self, method: str, **kwargs) -> Dict[str, Any]: ...
    def in_columns(self, columns: List[int]) -> NotePkg: ...
    def max_column(self) -> int: ...
    def first_offset(self) -> float: ...
    def last_offset(self) -> float: ...
    def first_last_offset(self) -> Tuple[float, float]: ...
    def describe_notes(self) -> Dict[str, pd.DataFrame]: ...
    def rolling_density(self, window: int = 1000, stride: int = None,
                        first_offset: float = None, last_offset: float = None) -> Dict[str, Dict[int, int]]: ...
    def duration(self): ...
