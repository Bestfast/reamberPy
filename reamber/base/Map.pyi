from __future__ import annotations

import datetime
from copy import deepcopy
from dataclasses import dataclass, field
from typing import Dict, List, TypeVar, Generic

import pandas as pd

from reamber.base.lists.BpmList import BpmList
from reamber.base.lists.NotePkg import NotePkg
from reamber.base.lists.TimedList import TimedList

HitListT = TypeVar('HitListT')
HoldListT = TypeVar('HoldListT')
BpmListT = TypeVar('BpmListT')
NotePkgT = TypeVar('NotePkgT', bound=NotePkg)


@dataclass
class Map(Generic[HitListT, HoldListT, NotePkgT, BpmListT]):
    """ This class should be inherited by all Map Objects

    They must inherit the data method, which extracts all data they hold.
    They are also assumed to be a TimedList.
    """

    notes: NotePkgT = field(default_factory=NotePkgT(hits=HitListT([]), holds=HoldListT([])))
    bpms: BpmList = field(default_factory=BpmListT([]))

    @property
    def lists(self) -> Dict[str, TimedList]: ...
    def __getitem__(self, item) -> TimedList: ...
    def __setitem__(self, key: str, value: TimedList): ...
    @property
    def offset(self): ...
    @offset.setter
    def offset(self, val: Dict[str, TimedList]): ...
    def deepcopy(self) -> Map: ...
    def ave_bpm(self, last_offset: float = None) -> float: ...
    def scroll_speed(self, reference_bpm: float = None) -> List[Dict[str, float]]: ...
    def metadata(self, unicode=True, **kwargs) -> str: ...
    def describe(self, rounding: int = 2, unicode: bool = False, **kwargs) -> str: ...
    def rate(self, by: float) -> Map: ...
    class Stacker:
        _ixs: List[int]
        _unstacked: Dict[str, TimedList]

        # The stacked property is a concat of all lists, this makes the common ops possible.
        _stacked: pd.DataFrame

        def __init__(self, lists: Dict[str, TimedList]): ...
        def _update(self): ...
        def __getitem__(self, item): ...
        def __setitem__(self, key, value): ...
        @property
        def offset(self) -> pd.Series: ...
        @offset.setter
        def offset(self, val: pd.Series): ...
        @property
        def column(self) -> pd.Series: ...
        @column.setter
        def column(self, val: pd.Series): ...
        @property
        def length(self) -> pd.Series: ...
        @length.setter
        def length(self, val: pd.Series): ...
        @property
        def bpm(self) -> pd.Series: ...
        @bpm.setter
        def bpm(self, val: pd.Series): ...
        @property
        def metronome(self) -> pd.Series: ...
        @metronome.setter
        def metronome(self, val: pd.Series): ...

    @property
    def stack(self) -> Stacker: ...
